import os
import streamlit as st
import pandas as pd
import psycopg2
from psycopg2.pool import SimpleConnectionPool
from dotenv import load_dotenv
import requests


# ===== Pool k·∫øt n·ªëi: t·∫°o 1 l·∫ßn cho c·∫£ app =====
@st.cache_resource
def get_pool():
    load_dotenv(dotenv_path="./.env")
    url = os.getenv("POSTGRESQL_DB_URL", "").strip()
    if not url:
        raise RuntimeError(
            "POSTGRESQL_DB_URL ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. "
            "H√£y ƒë·∫∑t env ho·∫∑c d√πng st.secrets ƒë·ªÉ cung c·∫•p chu·ªói k·∫øt n·ªëi."
        )
    # N·∫øu mu·ªën, b·∫°n c√≥ th·ªÉ th√™m keepalive v√†o URL:
    # url += ("&" if "?" in url else "?") + "keepalives=1&keepalives_idle=30&keepalives_interval=10&keepalives_count=5"
    return SimpleConnectionPool(minconn=1, maxconn=5, dsn=url)

pool = get_pool()

# ===== Helper: m∆∞·ª£n connection c√≥ 'ping' =====
def _borrow_conn():
    """
    L·∫•y connection t·ª´ pool, ki·ªÉm tra c√≤n s·ªëng (SELECT 1).
    N·∫øu ch·∫øt/ƒë·ª©t, ƒë√≥ng v√† l·∫•y conn m·ªõi.
    """
    conn = pool.getconn()
    try:
        if conn.closed:
            raise RuntimeError("Connection closed")
        with conn.cursor() as cur:
            cur.execute("SELECT 1")
            cur.fetchone()
        return conn
    except Exception:
        # ƒë√≥ng h·∫≥n conn c≈© v√† l·∫•y conn m·ªõi
        try:
            pool.putconn(conn, close=True)
        except Exception:
            pass
        return pool.getconn()

# ===== API truy v·∫•n ti·ªán l·ª£i =====
def query_df(sql: str, params: tuple | None = None) -> pd.DataFrame:
    conn = _borrow_conn()
    try:
        return pd.read_sql(sql, conn, params=params)
    finally:
        pool.putconn(conn)

def execute(sql: str, params: tuple | None = None) -> int:
    """
    Th·ª±c thi c√¢u l·ªánh ghi. D√πng context manager c·ªßa connection ƒë·ªÉ auto-commit/rollback.
    Tr·∫£ v·ªÅ rowcount.
    """
    conn = _borrow_conn()
    try:
        with conn, conn.cursor() as cur:
            cur.execute(sql, params)
            return cur.rowcount
    finally:
        pool.putconn(conn)
        
st.set_page_config(page_title="Trang ƒë·ªÉ ki·ªÉm tra n·ªôi dung b√†i vi·∫øt", layout="wide", initial_sidebar_state="expanded")
st.title("Trang ƒë·ªÉ ki·ªÉm tra n·ªôi dung b√†i vi·∫øt")


# ‚úÖ L·∫•y d·ªØ li·ªáu t·ª´ new_social_posts (gi·ªõi h·∫°n 200 d√≤ng cho nh·∫π)
posts = query_df("SELECT id, title, hash_tags, post_state FROM new_social_posts WHERE post_state = 'CREATED_CONTENT' ORDER BY id DESC LIMIT %s", (200,))
st.header("üìä Danh s√°ch c√°c b√†i vi·∫øt ch∆∞a duy·ªát n·ªôi dung")

if posts.empty:
    st.info("Kh√¥ng c√≥ b·∫£n ghi n√†o ·ªü tr·∫°ng th√°i CONTENT_CREATED.")
else:
    st.dataframe(posts, width='stretch')

    # ========== Ch·ªçn d√≤ng c·∫ßn s·ª≠a ========== 
    st.subheader("‚úçÔ∏è Ch·ªânh s·ª≠a 1 b·∫£n ghi")

    options = [
        f"{row.id} ‚Äî {str(row.title)}" 
        for _, row in posts.iterrows()
    ]
    display_to_id = {opt: int(opt.split(" ‚Äî ")[0]) for opt in options}

    selected_display = st.selectbox("Ch·ªçn b·∫£n ghi theo ID", options)
    selected_id = display_to_id[selected_display]
    row = posts.loc[posts["id"] == selected_id].iloc[0]

    # L·∫•y scripts (contents) cho post n√†y
    scripts = query_df("SELECT id, transcript FROM scripts WHERE post_id = %s ORDER BY idx ASC, id ASC", (selected_id,))

    # ========== Form edit ========== 
    with st.form(key="edit_form", clear_on_submit=False):
        new_title = st.text_input("Title", value=row["title"] or "")

        # Hash tags: nhi·ªÅu d√≤ng
        hash_tags_display = "\n".join(row["hash_tags"]) if isinstance(row["hash_tags"], list) else (row["hash_tags"] or "")
        new_hash_tags_multiline = st.text_area("Hash tags (m·ªói d√≤ng 1 hashtag)", value=hash_tags_display, height=120)

        # Contents: nhi·ªÅu d√≤ng (t·ª´ scripts.transcript)

        # Hi·ªÉn th·ªã t·ª´ng ƒëo·∫°n transcript th√†nh t·ª´ng cell ri√™ng
        transcript_cells = []
        if not scripts.empty:
            st.markdown("#### N·ªôi dung t·ª´ng ƒëo·∫°n (m·ªói ƒëo·∫°n 1 √¥)")
            for idx, script_row in scripts.iterrows():
                val = script_row["transcript"] or ""
                cell = st.text_area(f"ƒêo·∫°n {idx+1}", value=val, key=f"transcript_{script_row['id']}", height=80)
                transcript_cells.append(cell)
        else:
            st.info("Ch∆∞a c√≥ ƒëo·∫°n n·ªôi dung n√†o cho b√†i vi·∫øt n√†y.")
        # Cho ph√©p th√™m ƒëo·∫°n m·ªõi
        new_segment = st.text_area("Th√™m ƒëo·∫°n m·ªõi (n·∫øu c√≥)", value="", key="add_new_segment", height=80)

        col1, col2 = st.columns(2)
        with col1:
            save = st.form_submit_button("üíæ Save changes")
        with col2:
            cancel = st.form_submit_button("‚Ü©Ô∏è Reset form")

    if save:
        tags_list = [t.strip() for t in new_hash_tags_multiline.splitlines() if t.strip()]
        # Gom l·∫°i c√°c ƒëo·∫°n transcript t·ª´ c√°c cell
        contents_list = [c.strip() for c in transcript_cells if c.strip()]
        if new_segment.strip():
            contents_list.append(new_segment.strip())

        # Update new_social_posts
        affected_post = execute(
            """
            UPDATE new_social_posts
            SET title=%s,
                hash_tags=%s,
                post_state='CONTENT_CHECKED'
            WHERE id=%s
            """,
            (new_title, tags_list, int(selected_id))
        )

        # Update scripts.transcript (update t·ª´ng d√≤ng theo idx)
        affected_scripts = 0
        if not scripts.empty:
            for i, script_row in scripts.iterrows():
                if i < len(contents_list):
                    if script_row["transcript"] != contents_list[i]:
                        affected_scripts += execute(
                            "UPDATE scripts SET transcript=%s WHERE id=%s",
                            (contents_list[i], script_row["id"])
                        )
        # N·∫øu c√≥ th√™m contents m·ªõi, insert th√™m scripts m·ªõi
        if len(contents_list) > len(scripts):
            for idx_new, content in enumerate(contents_list[len(scripts):], start=len(scripts)):
                execute(
                    "INSERT INTO scripts (post_id, transcript, idx) VALUES (%s, %s, %s)",
                    (selected_id, content, idx_new)
                )

        if affected_post > 0 or affected_scripts > 0:
            st.success(f"ƒê√£ l∆∞u thay ƒë·ªïi & ƒë√°nh d·∫•u CONTENT_CHECKED cho ID {selected_id}.")
            try:
                resp = requests.post(
                    "https://n8n.thuong.cloud/webhook/make-image-prompt",
                    json={"id": str(selected_id)}
                )
                if resp.status_code == 200:
                    st.info("ƒê√£ g·ª≠i webhook t·∫°o image prompt th√†nh c√¥ng!")
                else:
                    st.warning(f"G·ª≠i webhook th·∫•t b·∫°i: {resp.status_code}")
            except Exception as ex:
                st.warning(f"G·ª≠i webhook l·ªói: {ex}")
            st.rerun()
        else:
            st.warning("Kh√¥ng c√≥ h√†ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")

    if cancel:
        st.experimental_rerun()
