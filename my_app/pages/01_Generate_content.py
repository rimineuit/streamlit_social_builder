# page_generate_content.py
import os
import json
import time
import requests
import streamlit as st
from dotenv import load_dotenv

# ================== PAGE CONFIG ==================
st.set_page_config(
    page_title="Generate Content ‚Ä¢ G·ª≠i b√†i vi·∫øt ƒë·∫øn webhook",
    layout="wide",
    initial_sidebar_state="expanded",
)
st.title("üìù Generate Content (G·ª≠i b√†i vi·∫øt t·ª´ ng∆∞·ªùi d√πng)")

load_dotenv(dotenv_path="./.env")  # n·∫øu b·∫°n mu·ªën override webhook qua .env

# ================== SIDEBAR CONFIG ==================
st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh")
DEFAULT_WEBHOOK = "https://n8n.thuong.cloud/webhook/make_content_from_user"
webhook_url = st.sidebar.text_input(
    "Webhook URL",
    value=os.getenv("MAKE_CONTENT_WEBHOOK_URL", DEFAULT_WEBHOOK),
    help="URL endpoint s·∫Ω nh·∫≠n JSON { content: <b√†i vi·∫øt> }"
)
timeout_sec = st.sidebar.slider("Timeout (gi√¢y)", 5, 90, 30)
st.sidebar.caption("N·∫øu server ch·∫≠m c√≥ th·ªÉ tƒÉng timeout.")

# ================== MAIN FORM ==================
with st.form(key="content_form", clear_on_submit=False):
    st.subheader("‚úçÔ∏è Nh·∫≠p n·ªôi dung b√†i vi·∫øt")
    content = st.text_area(
        "B√†i vi·∫øt",
        value=st.session_state.get("last_content", ""),
        height=350,
        placeholder="D√°n n·ªôi dung b√†i vi·∫øt c·ªßa b·∫°n v√†o ƒë√¢y..."
    )

    # th·ªëng k√™ nhanh
    words = len(content.split()) if content else 0
    chars = len(content) if content else 0
    st.caption(f"üìè {words} t·ª´ ‚Ä¢ {chars} k√Ω t·ª±")

    col1, col2, col3 = st.columns([1,1,2])
    with col1:
        submit = st.form_submit_button("üöÄ G·ª≠i t·∫°o n·ªôi dung", use_container_width=True)
    with col2:
        reset = st.form_submit_button("‚ôªÔ∏è Reset", use_container_width=True)

# ================== HANDLERS ==================
if reset:
    st.session_state["last_content"] = ""
    st.rerun()

if submit:
    payload = {"content": (content or "").strip()}

    # validate
    if not payload["content"]:
        st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung b√†i vi·∫øt tr∆∞·ªõc khi g·ª≠i.")
    else:
        # l∆∞u l·∫°i n·ªôi dung g·∫ßn nh·∫•t
        st.session_state["last_content"] = payload["content"]

        # g·ªçi webhook
        with st.spinner("‚è≥ ƒêang g·ª≠i b√†i vi·∫øt ƒë·∫øn webhook..."):
            try:
                resp = requests.post(
                    webhook_url,
                    json=payload,
                    timeout=timeout_sec,
                )
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.markdown("### ‚úÖ K·∫øt qu·∫£")
                st.write(f"Tr·∫°ng th√°i: {resp.status_code}")
                # c·ªë g·∫Øng parse JSON; n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ hi·ªán text
                try:
                    st.json(resp.json())
                except Exception:
                    st.code(resp.text)

                if 200 <= resp.status_code < 300:
                    st.success("ƒê√£ g·ª≠i b√†i vi·∫øt th√†nh c√¥ng!")
                else:
                    st.warning("Webhook tr·∫£ v·ªÅ m√£ kh√°c 2xx ‚Äî ki·ªÉm tra l·∫°i n·ªôi dung/endpoint.")
            except requests.Timeout:
                st.error(f"‚è±Ô∏è Qu√° th·ªùi gian ch·ªù ({timeout_sec}s). H√£y th·ª≠ tƒÉng timeout trong sidebar.")
            except requests.RequestException as e:
                st.error(f"‚ùå L·ªói khi g·ªçi webhook: {e}")

# ================== OPTIONAL: H∆Ø·ªöNG D·∫™N NHANH ==================
with st.expander("‚ÑπÔ∏è Payload g·ª≠i ƒëi (tham kh·∫£o)"):
    st.code(
        json.dumps(
            {"content": "N·ªôi dung b√†i vi·∫øt c·ªßa b·∫°n..."},
            ensure_ascii=False,
            indent=2
        ),
        language="json"
    )
